package cn.edu.ldu;
import java.io.IOException;
import java.net.InetAddress;
import java.net.InetSocketAddress;
import java.net.SocketAddress;
import java.nio.ByteBuffer;
import java.nio.channels.SelectionKey;
import java.nio.channels.Selector;
import java.nio.channels.ServerSocketChannel;
import java.nio.channels.SocketChannel;
import java.nio.charset.Charset;
import java.util.Iterator;
import java.util.Set;
import javax.swing.JOptionPane;

/**
 * 功能：石头剪刀布服务器，非阻塞IO通道技术
 * 设计：董相志 版权所有2016--2018,upsunny2008@163.com
 */
public class Server extends javax.swing.JFrame {
    private ServerSocketChannel listenChannel=null; //侦听通道
    private Selector selector; //选择器
    /**
     * Creates new form GameServer
     */
    public Server() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        topPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtHostName = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtHostPort = new javax.swing.JTextField();
        btnStart = new javax.swing.JButton();
        midPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtArea = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("石头剪刀布游戏（服务器）--设计：董相志，版权所有2016-2018");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        topPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "启动面板", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("宋体", 1, 18))); // NOI18N

        jLabel1.setFont(new java.awt.Font("宋体", 1, 16)); // NOI18N
        jLabel1.setText("服务器主机名：");

        txtHostName.setFont(new java.awt.Font("宋体", 1, 16)); // NOI18N
        txtHostName.setText("localhost");

        jLabel2.setFont(new java.awt.Font("宋体", 1, 16)); // NOI18N
        jLabel2.setText("服务器端口：");

        txtHostPort.setFont(new java.awt.Font("宋体", 1, 16)); // NOI18N
        txtHostPort.setText("20000");

        btnStart.setFont(new java.awt.Font("宋体", 1, 16)); // NOI18N
        btnStart.setText("启动服务器");
        btnStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStartActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout topPanelLayout = new javax.swing.GroupLayout(topPanel);
        topPanel.setLayout(topPanelLayout);
        topPanelLayout.setHorizontalGroup(
            topPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(topPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtHostName, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtHostPort, javax.swing.GroupLayout.DEFAULT_SIZE, 66, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnStart)
                .addContainerGap())
        );
        topPanelLayout.setVerticalGroup(
            topPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(topPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(topPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtHostName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(txtHostPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnStart))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        getContentPane().add(topPanel, java.awt.BorderLayout.PAGE_START);

        midPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "监控面板", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("宋体", 1, 18))); // NOI18N
        midPanel.setLayout(new java.awt.BorderLayout());

        txtArea.setEditable(false);
        txtArea.setBackground(new java.awt.Color(204, 255, 255));
        txtArea.setColumns(20);
        txtArea.setFont(new java.awt.Font("Monospaced", 1, 14)); // NOI18N
        txtArea.setLineWrap(true);
        txtArea.setRows(5);
        jScrollPane1.setViewportView(txtArea);

        midPanel.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        getContentPane().add(midPanel, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    //启动服务器
    private void btnStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStartActionPerformed
        btnStart.setEnabled(false);
        try {
            //构建工作地址
            String hostName=txtHostName.getText();
            int hostPort=Integer.parseInt(txtHostPort.getText());
            SocketAddress serverAddr= new InetSocketAddress(InetAddress.getByName(hostName),hostPort);
            selector=Selector.open(); //创建选择器
            listenChannel=ServerSocketChannel.open(); //创建侦听通道
            listenChannel.socket().bind(serverAddr); //侦听通道绑定工作地址
            listenChannel.configureBlocking(false); //侦听通道工作于非阻塞模式
            listenChannel.register(selector, SelectionKey.OP_ACCEPT); //侦听通道注册到选择器，设置OP_ACCEPT标志位                  
            txtArea.append("服务器开始侦听客户机连接.....\n");            
        } catch (IOException ex) { }
          
        new Thread(new Runnable() {
            @Override
            public void run() {
                try {                   
                    while (true) { //轮询各通道状态，处理连接和会话
                       int nKeys=selector.select(); //查询令牌集合
                       if (nKeys==0) continue; //没有就绪令牌，越过下面步骤，开始新一轮查询
                       Set <SelectionKey> readyKeys=selector.selectedKeys(); //返回就绪令牌集合
                       Iterator<SelectionKey> it=readyKeys.iterator(); //就绪令牌集合迭代器
                       while (it.hasNext()) { //遍历就绪令牌集合
                           SelectionKey key=it.next(); //取出下一个令牌
                           if (key.isAcceptable()) { //如果是连接事件
                               doAccept(key); //建立连接，创建新会话通道
                           } else if (key.isReadable()) { //如果是读数据事件
                               doRead(key); //接收数据
                           }
                           it.remove(); //从就绪集合中删除处理过的令牌
                       }//end while
                    }//end while                   
                } catch (IOException ex) {
                   JOptionPane.showMessageDialog(null, ex.getMessage(), "服务器错误", JOptionPane.ERROR_MESSAGE);
                }                
            }//end run
        }).start();    
    }//GEN-LAST:event_btnStartActionPerformed
    //处理连接
    private void doAccept(SelectionKey key) throws IOException { 
        ServerSocketChannel serverChannel=(ServerSocketChannel)key.channel();//侦听通道
        SocketChannel clientChannel=serverChannel.accept(); //接受连接
        txtArea.append("服务器建立了与客户机的会话通道："+clientChannel+"\n");
        clientChannel.configureBlocking(false); //非阻塞
        //注册通道，协议作为附件 
        Protocol protocol=new Protocol(); //会话协议        
        clientChannel.register(selector, SelectionKey.OP_READ,protocol); 
    }
    //读取数据
    private void doRead(SelectionKey key) throws IOException {
        ByteBuffer recvBuff=ByteBuffer.allocate(1024);//接收缓冲区
        ByteBuffer sendBuff=ByteBuffer.allocate(1024);//发送缓冲区 
        Charset charset=Charset.forName("UTF-8");  //字符集
        SocketChannel clientChannel=(SocketChannel)key.channel(); //会话通道
        Protocol protocol=(Protocol)key.attachment(); //取出协议
        recvBuff.clear(); //接收缓冲区清空
        clientChannel.read(recvBuff); //从通道读取数据
        recvBuff.flip(); //缓冲区指针回到数据起点
        String recvStr=charset.decode(recvBuff).toString(); //解码成字符串
        String sendStr=protocol.protocolWorking(recvStr); //求解回送字符串
        sendBuff.clear(); //发送缓冲区清空
        sendBuff=ByteBuffer.wrap(sendStr.getBytes(charset)); //发送字符串放入缓冲区
        clientChannel.write(sendBuff); //通道发送
        txtArea.append("玩家IP和端口："+clientChannel.getRemoteAddress()+" 选择："+recvStr+"  <-->  服务器选择： "+sendStr.substring(0,sendStr.indexOf("#"))+"  结果："+sendStr.substring(sendStr.indexOf("#")+1)+"\n");
    }//end doRead
    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        
    }//GEN-LAST:event_formWindowClosing

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Server().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnStart;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel midPanel;
    private javax.swing.JPanel topPanel;
    public static javax.swing.JTextArea txtArea;
    private javax.swing.JTextField txtHostName;
    private javax.swing.JTextField txtHostPort;
    // End of variables declaration//GEN-END:variables
}
